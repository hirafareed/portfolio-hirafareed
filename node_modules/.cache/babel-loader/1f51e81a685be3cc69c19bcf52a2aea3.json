{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/* eslint-disable no-mixed-operators */\n// code taken and adjusted from rgb-hex because their module concentrates on node env\n\nexports.default = function (red, green, blue, alpha) {\n  var isPercent = (red + (alpha || '')).toString().includes('%');\n\n  if (typeof red === 'string') {\n    var res = red.match(/(0?\\.?\\d{1,3})%?\\b/g).map(Number); // TODO: use destructuring when targeting Node.js 6\n\n    red = res[0];\n    green = res[1];\n    blue = res[2];\n    alpha = res[3];\n  } else if (alpha !== undefined) {\n    alpha = parseFloat(alpha);\n  }\n\n  if (typeof red !== 'number' || typeof green !== 'number' || typeof blue !== 'number' || red > 255 || green > 255 || blue > 255) {\n    throw new TypeError('Expected three numbers below 256');\n  }\n\n  if (typeof alpha === 'number') {\n    if (!isPercent && alpha >= 0 && alpha <= 1) {\n      alpha = Math.round(255 * alpha);\n    } else if (isPercent && alpha >= 0 && alpha <= 100) {\n      alpha = Math.round(255 * alpha / 100);\n    } else {\n      throw new TypeError('Expected alpha value (' + alpha + ') as a fraction or percentage');\n    }\n\n    alpha = (alpha | 1 << 8).toString(16).slice(1);\n  } else {\n    alpha = '';\n  }\n\n  return (blue | green << 8 | red << 16 | 1 << 24).toString(16).slice(1) + alpha;\n};","map":{"version":3,"sources":["/Users/hirafareed/Downloads/portfolio-website/client/node_modules/scroll-background/dist/utils/rgb-hex.js"],"names":["Object","defineProperty","exports","value","default","red","green","blue","alpha","isPercent","toString","includes","res","match","map","Number","undefined","parseFloat","TypeError","Math","round","slice"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC5CC,EAAAA,KAAK,EAAE;AADqC,CAA7C;AAIA;AACA;;AACAD,OAAO,CAACE,OAAR,GAAkB,UAAUC,GAAV,EAAeC,KAAf,EAAsBC,IAAtB,EAA4BC,KAA5B,EAAmC;AACpD,MAAIC,SAAS,GAAG,CAACJ,GAAG,IAAIG,KAAK,IAAI,EAAb,CAAJ,EAAsBE,QAAtB,GAAiCC,QAAjC,CAA0C,GAA1C,CAAhB;;AAEA,MAAI,OAAON,GAAP,KAAe,QAAnB,EAA6B;AAC5B,QAAIO,GAAG,GAAGP,GAAG,CAACQ,KAAJ,CAAU,qBAAV,EAAiCC,GAAjC,CAAqCC,MAArC,CAAV,CAD4B,CAE5B;;AACAV,IAAAA,GAAG,GAAGO,GAAG,CAAC,CAAD,CAAT;AACAN,IAAAA,KAAK,GAAGM,GAAG,CAAC,CAAD,CAAX;AACAL,IAAAA,IAAI,GAAGK,GAAG,CAAC,CAAD,CAAV;AACAJ,IAAAA,KAAK,GAAGI,GAAG,CAAC,CAAD,CAAX;AACA,GAPD,MAOO,IAAIJ,KAAK,KAAKQ,SAAd,EAAyB;AAC/BR,IAAAA,KAAK,GAAGS,UAAU,CAACT,KAAD,CAAlB;AACA;;AAED,MAAI,OAAOH,GAAP,KAAe,QAAf,IAA2B,OAAOC,KAAP,KAAiB,QAA5C,IAAwD,OAAOC,IAAP,KAAgB,QAAxE,IAAoFF,GAAG,GAAG,GAA1F,IAAiGC,KAAK,GAAG,GAAzG,IAAgHC,IAAI,GAAG,GAA3H,EAAgI;AAC/H,UAAM,IAAIW,SAAJ,CAAc,kCAAd,CAAN;AACA;;AAED,MAAI,OAAOV,KAAP,KAAiB,QAArB,EAA+B;AAC9B,QAAI,CAACC,SAAD,IAAcD,KAAK,IAAI,CAAvB,IAA4BA,KAAK,IAAI,CAAzC,EAA4C;AAC3CA,MAAAA,KAAK,GAAGW,IAAI,CAACC,KAAL,CAAW,MAAMZ,KAAjB,CAAR;AACA,KAFD,MAEO,IAAIC,SAAS,IAAID,KAAK,IAAI,CAAtB,IAA2BA,KAAK,IAAI,GAAxC,EAA6C;AACnDA,MAAAA,KAAK,GAAGW,IAAI,CAACC,KAAL,CAAW,MAAMZ,KAAN,GAAc,GAAzB,CAAR;AACA,KAFM,MAEA;AACN,YAAM,IAAIU,SAAJ,CAAc,2BAA2BV,KAA3B,GAAmC,+BAAjD,CAAN;AACA;;AACDA,IAAAA,KAAK,GAAG,CAACA,KAAK,GAAG,KAAK,CAAd,EAAiBE,QAAjB,CAA0B,EAA1B,EAA8BW,KAA9B,CAAoC,CAApC,CAAR;AACA,GATD,MASO;AACNb,IAAAA,KAAK,GAAG,EAAR;AACA;;AAED,SAAO,CAACD,IAAI,GAAGD,KAAK,IAAI,CAAhB,GAAoBD,GAAG,IAAI,EAA3B,GAAgC,KAAK,EAAtC,EAA0CK,QAA1C,CAAmD,EAAnD,EAAuDW,KAAvD,CAA6D,CAA7D,IAAkEb,KAAzE;AACA,CAhCD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\n/* eslint-disable no-mixed-operators */\n// code taken and adjusted from rgb-hex because their module concentrates on node env\nexports.default = function (red, green, blue, alpha) {\n\tvar isPercent = (red + (alpha || '')).toString().includes('%');\n\n\tif (typeof red === 'string') {\n\t\tvar res = red.match(/(0?\\.?\\d{1,3})%?\\b/g).map(Number);\n\t\t// TODO: use destructuring when targeting Node.js 6\n\t\tred = res[0];\n\t\tgreen = res[1];\n\t\tblue = res[2];\n\t\talpha = res[3];\n\t} else if (alpha !== undefined) {\n\t\talpha = parseFloat(alpha);\n\t}\n\n\tif (typeof red !== 'number' || typeof green !== 'number' || typeof blue !== 'number' || red > 255 || green > 255 || blue > 255) {\n\t\tthrow new TypeError('Expected three numbers below 256');\n\t}\n\n\tif (typeof alpha === 'number') {\n\t\tif (!isPercent && alpha >= 0 && alpha <= 1) {\n\t\t\talpha = Math.round(255 * alpha);\n\t\t} else if (isPercent && alpha >= 0 && alpha <= 100) {\n\t\t\talpha = Math.round(255 * alpha / 100);\n\t\t} else {\n\t\t\tthrow new TypeError('Expected alpha value (' + alpha + ') as a fraction or percentage');\n\t\t}\n\t\talpha = (alpha | 1 << 8).toString(16).slice(1);\n\t} else {\n\t\talpha = '';\n\t}\n\n\treturn (blue | green << 8 | red << 16 | 1 << 24).toString(16).slice(1) + alpha;\n};"]},"metadata":{},"sourceType":"script"}